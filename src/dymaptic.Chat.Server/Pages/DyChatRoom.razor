@page "/dychatroom"

@using Microsoft.AspNetCore.SignalR.Client;
@using dymaptic.Chat.Shared.Data
@using System.Text

@inject AuthenticationStateProvider AuthenticationStateProvider

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <h1>Welcome to dymaptic Chat</h1>
            <hr />

            <div class="alert alert-secondary mt-4" role="alert">
                <span class="oi oi-person mr-2" aria-hidden="true"></span>
                <span>You are connected as <b>@_username</b></span>
            </div>
            <div id="scrollbox">
                @foreach (var item in _messages)
                {
                    @if (item.Content.StartsWith("[Notice]"))
                    {
                        <div class="alert alert-info">@item.Content</div>
                    }
                    else
                    {
                        <div class="@(item.SenderType == DyChatSenderType.User ? "sent" : "received")">
                            <div class="user">@item.Username</div>
                            <div class="msg">@item.Content</div>
                        </div>
                    }
                }
                @if (_responseMessageBuilder.Length > 0)
                {
                    <div class="received">
                        <div class="user">dymaptic</div>
                        <div class="msg">@_responseMessageBuilder.ToString()...</div>
                    </div>
                }
                <hr />
                <textarea class="input-lg" placeholder="enter your comment" @bind="@_newMessage"></textarea>
                <button class="btn btn-default" @onclick="@(() => SendAsync(_newMessage))">Send</button>
            </div>

        </Authorized>
    </AuthorizeView>
</CascadingAuthenticationState>
@code {
    [Inject]
    public NavigationManager NavigationManager { get; set; } = null!;

    [Inject]
    public ILogger<DyChatRoom>? Logger { get; set; }

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        string? userIdentityName = authState.User.Identity?.Name;
        if (string.IsNullOrEmpty(userIdentityName))
        {
            NavigationManager.NavigateTo("/login?returnUrl=/dychatroom", true);
            return;
        }
        _username = authState.User.Identity?.Name;

        try
        {
            string baseUrl = NavigationManager.BaseUri;
            _hubUrl = baseUrl.TrimEnd('/') + ChatHubRoutes.HubUrl;
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(_hubUrl)
                .Build();

            await _hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            _message = ex.Message;
        }
    }

    private async Task SendAsync(string message)
    {
        if (!string.IsNullOrEmpty(message) || !string.IsNullOrWhiteSpace(message))
        {
            try
            {
                _messages.Add(new DyChatMessage(message, DyChatSenderType.User, _username));
                var context = new DyChatContext(new List<DyLayer>() { treesLayer, parcelLayer }, "My_Parcels");
                await foreach (char c in _hubConnection!.StreamAsync<char>(ChatHubRoutes.QueryChatService,
                    new DyRequest(_messages, context, null)))
                {
                    _responseMessageBuilder.Append(c);
                    StateHasChanged();
                }
                _messages.Add(new DyChatMessage(_responseMessageBuilder.ToString(), DyChatSenderType.Bot, "dymaptic"));
                _responseMessageBuilder.Clear();
                _message = string.Empty;
            }
            catch (Exception ex)
            {
                Logger!.LogError(ex, $"Error sending message: {ex.Message}");
            }
        }
    }

    private string? _username;
    private string? _message;
    private string? _newMessage;
    private readonly StringBuilder _responseMessageBuilder = new();
    private readonly List<DyChatMessage> _messages = new();
    private string? _hubUrl;
    private HubConnection? _hubConnection;
    private DyLayer treesLayer = new DyLayer("Special_Tree_Layer", new List<DyField>() { new DyField("Tree_Name", "Tree Name", "string"), new DyField("TT", "Type", "string") });
    private DyLayer parcelLayer = new DyLayer("My_Parcels", new List<DyField>() { new DyField("Parcel_Name", "Parcel Name", "string") });

}
