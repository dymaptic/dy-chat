@page "/dychatroom"

@using Microsoft.AspNetCore.SignalR.Client;
@using dymaptic.Chat.Shared.Data
@using System.Text

<h1>Welcome to dymaptic Chat</h1>
<hr />

@if (!_isChatting)
{
    <p>
        Enter your name to start chatting:
    </p>

    <input type="text" maxlength="32" @bind="@_username" />
    <button type="button" @onclick="BeginChat"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>

    // Error messages
    @if (_message != null)
    {
        <div class="invalid-feedback">@_message</div>
        <small id="emailHelp" class="form-text text-muted">@_message</small>
    }
}
else
{
    // banner to show current user
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>You are connected as <b>@_username</b></span>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
    </div>
    // display messages
    <div id="scrollbox">
        @foreach (var item in _messages)
        {
            @if (item.Content.StartsWith("[Notice]"))
            {
                <div class="alert alert-info">@item.Content</div>
            }
            else
            {
                <div class="@(item.SenderType == DyChatSenderType.User ? "sent" : "received")">
                    <div class="user">@item.Username</div>
                    <div class="msg">@item.Content</div>
                </div>
            }
        }
        @if (_responseMessageBuilder.Length > 0)
        {
            <div class="received">
                <div class="user">dymaptic</div>
                <div class="msg">@_responseMessageBuilder.ToString()...</div>
            </div>
        }
        <hr />
        <textarea class="input-lg" placeholder="enter your comment" @bind="@_newMessage"></textarea>
        <button class="btn btn-default" @onclick="@(() => SendAsync(_newMessage))">Send</button>
    </div>
}

@code {
    [Inject]
    public NavigationManager NavigationManager { get; set; } = null!;

    [Inject]
    public ILogger<DyChatRoom>? Logger { get; set; }

    private async Task BeginChat()
    {
        try
        {
            string baseUrl = NavigationManager.BaseUri;
            _hubUrl = baseUrl.TrimEnd('/') + ChatHubRoutes.HubUrl;
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(_hubUrl)
                .Build();
            
            await _hubConnection.StartAsync();
            _isChatting = true;
        }
        catch (Exception ex)
        {
           _message = ex.Message;
        }
    }

    private async Task SendAsync(string message)
    {
        if (_isChatting && !string.IsNullOrEmpty(message) || !string.IsNullOrWhiteSpace(message))
        {
            try
            {
                _messages.Add(new DyChatMessage(message, DyChatSenderType.User, _username));
                var context = new DyChatContext(new List<DyLayer>() { treesLayer, parcelLayer }, "My_Parcels");
                await foreach (char c in _hubConnection!.StreamAsync<char>(ChatHubRoutes.QueryChatService, 
                    new DyRequest(_messages, context)))
                {
                    _responseMessageBuilder.Append(c);
                    StateHasChanged();
                }
                _messages.Add(new DyChatMessage(_responseMessageBuilder.ToString(), DyChatSenderType.Bot, "dymaptic"));
                _responseMessageBuilder.Clear();
                _message = string.Empty;
            }
            catch (Exception ex)
            {
                Logger!.LogError(ex, $"Error sending message: {ex.Message}");
            }
        }
    }   

    async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await SendAsync($"[Notice] {_username} has left the chat");
            await _hubConnection!.StopAsync();
            await _hubConnection.DisposeAsync();
            _hubConnection = null;
            _isChatting = false;
        }
    }

    private bool _isChatting;
    private string? _username;
    private string? _message;
    private string? _newMessage;
    private readonly StringBuilder _responseMessageBuilder = new();
    private readonly List<DyChatMessage> _messages = new();
    private string? _hubUrl;
    private HubConnection? _hubConnection;
    private DyLayer treesLayer = new DyLayer("Special_Tree_Layer", new List<DyField>() {new DyField("Tree_Name", "Tree Name", "string"), new DyField("TT", "Type", "string")});
    private DyLayer parcelLayer = new DyLayer("My_Parcels", new List<DyField>() {new DyField("Parcel_Name", "Parcel Name", "string")});

}
